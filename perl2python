#!/usr/bin/perl

# written by andrewt@cse.unsw.edu.au September 2013
# as a starting point for COMP2041/9041 assignment 
# http://cgi.cse.unsw.edu.au/~cs2041/13s2/assignments/perl2python
# edited by hwav057@cse.unsw.edu.au for more functionality September and October 2013

#my print function adds an extra space when it is handling a variable

#GLOBAL VARIABLES: used throughout entire code
our $tab = 0;
our @python_source = ();
our @imports_python_source = ();
our @hashes_source = (); #these are the arrays and hashes that need to be predeclared before printing @python_source
our @lists_source = ();
our $amt_hashes = 0;
our $amt_lists = 0;
our %variables = [];
our $lines_python_source = 0;
our $lines_imports = 0;
#END GLOBAL VARIABLES

#MAIN LOOP: goes through each line and calls functions which handle translation
while ($line = <>) {
	chomp $line;
	#need to check if there is any comments at end of line of code, if there is
	#will be added to source array at the bottom of this while loop, just before 
	#next line is translated
	if ($line =~ s/\;\s*#(.*)$//) {
		$comment = $1;
	}
	if ($line =~ /^#!/ && $. == 1) {
		# translate #! line 
		print "#!/usr/bin/python2.7 -u\n";
	} elsif ($line =~ /^\s*#/ || $line =~ /^\s*$/) {
		# Blank & comment lines can be passed unchanged
		addToSourceArray("$line\n");
	} elsif ($line =~ /^\s*printf\s*([^\;]+)\;*$/) {
		#handle printf. send to function
		handlePrintf($1);
	} elsif ($line =~ /^\s*print\s*([^\;]+)\;\s*$/) { #/^\s*print\s*("?.*\s*[\\n]?\s*"?)*\s*\;*$/) {
		# Python's print adds a new-line character by default
		# so we need to delete it from the Perl print statement
		$temp = $1;
		printFunction($temp);
	} elsif ($line =~ /^\s*\$(.+)\;$/) {
		#declaring a variable 
		#python just removes the dollar sign and semi-colon
		($a,$temp) = split /\s*\=\s*/, $1;	
		variableDec($a,$temp);	
 	} elsif ($line =~ /^\s*if\s*\((.*)\)\s*\{\s*$/) {
		#if condition
		handleIf($1);
		$tab++;
	} elsif ($line =~ /^\s*while\s*\((.*)\)\s*\{\s*$/) {
		#while loop
		handleWhile($1);
		$tab++;
	} elsif ($line =~ /^\s*foreach\s*(.+)\)\s*\{\s*$/) {
		#foreach loop
		handleForeach($1);
		$tab++;
	} elsif ($line =~ /^\s*\}\s*.*\s*$/) {
		#catch the end of a loop or similar statement with a "}"
		$tab--;
		$result = handleElse($line); # =1 when else, =0 when normal
		$tab += $result;
	} elsif ($line =~ /^\s*chomp \$([^\;]*)\;\s*$/) {
		#handle chomp function	
		addToSourceArray("$1 = $1.rstrip(\'\\n\')\n");
	} elsif ($line =~ /\s*last;\s*$/) {
		addToSourceArray("break\n");
	} elsif ($line =~ /^\s*open ([^\;]*)\;\s*$/) {
		handleOpen($1);
	} elsif ($line =~ /^\s*close/) { next;
	} elsif ($line =~ /last/) {
		#perl allows the last statement to be followed by an 'if' conditional
		if ($line =~ /if \(([^\)]+)\)\;$/) {
			handleIf($1);
			$tab++;
			addToSourceArray("break\n");
			$tab--;
		} else {
			addToSourceArray("break\n");
		}
	} elsif ($line =~ /next/) {
		#perl allows the next statement to be followed by an 'if' conditional
		if ($line =~ /if \(([^\)]+)\)\;$/) {
			handleIf($1);
			$tab++;
			addToSourceArray("continue\n");
			$tab--;
		} else {
			addToSourceArray("continue\n");
		}
	} elsif ($line =~ /^\s*\@(.+)\s*\=\s*(.+)\;\s*/) {
		handleArrayDec($1,$2);
	} elsif (($line =~ /push\([^\,]*\,([^\)]*)\)/)||($line =~ /unshift\([^\,]*\,([^\)]*)\)/)) {
		#handle push and unshift on arrays
		my $a = handleArrayAdd($line,$1);
		addToSourceArray("$a\n");
	} else {
		#Lines we can't translate are turned into comments
		#print "HI\n";
		addToSourceArray("#$line\n");
	}
	#adding comments if they exiest
	if (defined $comment) {
		$python_source[$lines_python_source-1] =~ s/\n//;
		$python_source[$lines_python_source-1] .= " #$comment\n";
		undef $comment;
	}
}
#function that handles the printing of python code to STDOUT
outputSource();
#END MAIN LOOP

#HELPER FUNCTIONS: there's a lot, they do pretty much everything
sub handlePrintf {
	#Used to handle basic perl Printf functions
	#output is using the python print function
	my $to_print = $_[0];
	#basically need to go through in order, first argument gets pasted to first formatter
	my $argument = $to_print;
	$argument =~ s/([^\,]+)\,\s*//;
	$to_print = $1;
	my @arguments = split / /,$argument;
	foreach $arg (@arguments) {
		#insert all the arguments of the printf into the actual string (ie so my printFunction can handle it)
		$to_print =~ s/\%[csduoxXeEfGgpn]/$arg/;
	}
	#call my normal print handle function, its capable of outputting this properly
	printFunction($to_print);
}

sub handleArrayDec {
	#used for handling simple statements like @a = <STDIN>
	#some of this stuff in perl is only one line, but many lines in python
	my $array = $_[0];	
	my $assign = $_[1];
	$array =~ s/ //g;
	if (!grep( /^$array$/, @list_source)) {
		$list_source[$amt_lists++] = $array;
	} 
	if ($assign eq '<STDIN>') {
		addToSourceArray("for line in sys.stdin:\n");
		$tab++;
		addToSourceArray("$array.append(line)\n");
		$tab--;
		handleImports('sys');
	} elsif ($assign =~ s/split\s*\/(.*)\/\,\s*\$([^ \.]+)/FIXME/) {
		$variable_assign = handleSplit($1,$2);
		addToSourceArray("$array = $variable_assign\n");
	} elsif ($assign =~ /reverse\(\@([^\)]*)\)/) {
		#handle reverse statement
		addToSourceArray("$array = $1\[::-1]\n");
	} elsif ($assign =~ /^\<(.*)\>$/) {
		addToSourceArray("for line in F:\n");
		$tab++;
		addToSourceArray("$array.append(line)\n");
		$tab--;
	} else {
		addToSourceArray("#$array = $assign NOT HANDLED YET handleArrayDec\n");
	}
}

sub handleHash {
	#for basic hash declarations, just translates the perl syntax to python syntax
	my $hash_to_handle = $_[0];
	my $hash_key = $_[1];
	#we need to remove curly braces
	$hash_to_handle =~ s/{.*//;
	$hash_key = conditionHandling($hash_key);
	$hash_to_handle = "$hash_to_handle\[$hash_key]";
	#we also need to pre-define the hashes (by adding to @hashes_source)
	$hash_name = $hash_to_handle;
	$hash_name =~ s/\[.*//;
	if (!grep( /^$hash_name$/, @hashes_source)) {
		$hashes_source[$amt_hashes++] = $hash_name;
	} 
	return $hash_to_handle;
}

sub handleOpen {
	#translates perl's open function to python's open function
	#just assuming the basic case of reading from a file, in format of 
	#open F, "<file_name"; and convert to F = open("file_name")
	my @arguments = split /\s*,\s*/, $_[0];
	$arguments[1] =~ s/^\"\<//;
	$arguments[1] =~ s/\"$//;
	my $tmp = $arguments[1];
	$arguments[1] = checkSysMod($arguments[1]);
	addToSourceArray("$arguments[0] = open(\"$arguments[1]\")\n") if $arguments[1] eq $tmp; 
	addToSourceArray("$arguments[0] = open($arguments[1])\n") if $arguments[1] ne $tmp; 
}

sub handleArrayAdd {
	#operations on arrays where an object is added via function to list, ie push and unshift
	my $input_to_handle = $_[0];
	my $assign = $_[1];
	my $arr_name = $input_to_handle;
	$arr_name =~ s/\@([^\,]+)//;
	$arr_name = $1;
	$assign =~ s/^\$//;
	if (!grep( /^$arr_name$/, @list_source)) {
		$list_source[$amt_lists++] = $arr_name;
	} 
	if ($input_to_handle =~ /push/) {
		return "$arr_name.append($assign)";
	} elsif ($input_to_handle =~ /unshift/) {
		return "$arr_name.insert(0,$assign)";
	} else {
		return "#$input_to_handle handleArrayPush: not handled";
	}
}

sub handleArrayTake {
	#operations on arrays where an object is taken from list, ie pop and shift
	my $input_to_handle = $_[0];
	my $assign = $_[1];
	my $arr_name = $input_to_handle;
	$arr_name =~ s/\@([^ ]+)//;
	$arr_name = $1;
	if ($input_to_handle =~ /pop/) {
		return "$assign = $arr_name.pop()";
	} elsif ($input_to_handle =~ /shift/) {
		return "$assign = $arr_name.pop(0)"; 
	} else {
		return "#$input_to_handle handleArrayPull: not handled\n";
	}
}

sub handleSplit {
	#basic translation of the perl split to python split
	my $delimeter = $_[0];
	my $variable = $_[1];
	$delimeter =~ s/\\([^\\])/$1/; #python's split doesn't read metacharacters, so perl's metacharacter canceller '\' needs to be removed
	return "$variable.split('$delimeter')";
}

sub handleIntegerVariables { 
	#read in variables passed from the conditionHandling function
	#and determine if it is a variable or constant
	#if constant, then change code to include int() changing
	my $variable= $_[0];
	
	if ($variable =~ /\$/) {
		$variable =~ s/\$//;
		foreach my $py_line (@python_source) {
			#these are cases that have been needed to be added for the examples
			#i am only adding the necessary ones
			if ($py_line =~ /^(\s*$variable\s*=\s*)(sys.stdin.readline\(\)\s*)[\\n]*$/) {
				$py_line = "$1float(sys.stdin.readline())\n";
			}
		}
		$python_source[$lines_python_source]
	}
}

sub handleArray {
	#handles arrays when elements are added to them
	my $list = $_[0];
	my $extra = '';
	$list =~ s/\[(.*)\]//;
	my $variable = $1;
	$variable = conditionHandling($variable);
	if ($variable =~ s/\+\+//) {
		$extra = "CUTMEHERE$variable += 1"; 
	}
	if (!grep( /^$list$/, @list_source)) {
		$list_source[$amt_lists++] = $list;
	} 
	return "$list.append\($extra";
}

sub variableDec {
	#variable declaration function, handles pretty much every thing of form "$variable = ..." or "$variable =~ ..."
	my $variable_name = $_[0];
	my $variable_assign = $_[1];
	$variable_name =~ s/\./\+/;
	my $using_array = 0;
	if ($variable_assign =~ /^\$([1-9])$/) {
		$variable_assign = "m.group($1)";
	}
	if ($variable_assign =~ s/split\s*\/(.*)\/\,\s*\$([^ \.]+)/FIXME/) {
		#handling split function
		my $fix = handleSplit($1,$2);
		$fix =~ s/\./LEGITDOT/;	#dots are replaced later in this function, so this is a temp variable for the while
		$variable_assign =~ s/FIXME/$fix/;
	}
	if ($variable_name =~ /\[(.*)\]/) {
		#handling array declarations
		$variable_name = handleArray($variable_name); 
		($variable_name, $extra) = split /CUTMEHERE/,$variable_name;
		$using_array = 1;
		if ($extra =~ /.+/) {
			addToSourceArray("$extra\n");
		}
	}
	if ($variable_name =~ /{(.*)}(.*)/) {
		#ie its a hash
		my $potential_following = $2;
		$variable_name = handleHash($variable_name,$1).$potential_following;
	}
	if ($variable_assign =~ /^~/) {
		$variable_assign =~ s/^~\s*//;
		$variable_assign = regularExpHandling($variable_assign, $variable_name);
		if ($using_array == 1) {
			addToSourceArray("$variable_name$variable_assign)\n");
		} else {
			addToSourceArray("$variable_name = $variable_assign\n");
		}
	} elsif ($variable_assign =~ /{(.*)}/) {
		#hash same as last time except on different end of declaration
		$hash_key = $1;
		$variable_assign =~ s/^\$//; #need to remove perl's variable metacharacter "$"
		$variable_assign = handleHash($variable_assign,$hash_key);
		if ($using_array == 1) {
			addToSourceArray("$variable_name$variable_assign)\n");
		} else {
			addToSourceArray("$variable_name = $variable_assign\n");
		}
	} elsif ($variable_assign =~ /\@/) {
		addToSourceArray(handleArrayTake($variable_assign,$variable_name) . "\n");
	} elsif ($variable_assign eq '') {
		#variable dec is of form $variable++ or $variable--
		#also need to check if these are hashes, if so the variable name will
		#already by translated to pythons '[]' form
		if ($variable_name =~ s/\-\-$//) {
			if ($variable_name =~ /(.*)\[(.*)\]/) {
				#perl lets you just add or subtract from hashes regardless of if they're defined
				#python makes you first check if its defined
				my $key = $2;
				my $hash = $1;
				addToSourceArray("if $key in $hash:\n");
				$tab++;
				addToSourceArray("$variable_name -= 1\n");
				$tab--;
				addToSourceArray("else:\n");
				$tab++;
				addToSourceArray("$variable_name = -1\n");
				$tab--;
			} else {
				addToSourceArray("$variable_name -= 1\n"); 
			}
		} elsif ($variable_name =~ s/\+\+//) { 
			if ($variable_name =~ /(.*)\[(.*)\]/) {
				#perl lets you just add or subtract from hashes regardless of if they're defined
				#python makes you first check if its defined
				my $key = $2;
				my $hash = $1;
				addToSourceArray("if $key in $hash:\n");
				$tab++;
				addToSourceArray("$variable_name += 1\n");
				$tab--;
				addToSourceArray("else:\n");
				$tab++;
				addToSourceArray("$variable_name = 1\n");
				$tab--;
			} else {
				addToSourceArray("$variable_name += 1\n"); 
			}
		} else { #case that its of a different form, then can be recognised and fixed
			addToSourceArray("#$variable_name# THIS IS NOT CODED FOR YET\n"); 
		}
	} else {
		#check if each item is a variable and interp
		#print "var ass ($variable_assign)\n";
		#$variable_assign =~ s/\"|\'//g;
		$variable_assign = checkSysMod($variable_assign);
		#note the following four lines are a precaution, it is a case where my code
		#can break. this is because it converts all perl string concat '.'s to '+' (python)
		#but in this case, the dot is required, so using temp variable		
		$variable_assign =~ s/m.group/mLEGITDOTgroup/;
		$variable_assign =~ s/sys.argv/sysLEGITDOTargv/;
		$variable_assign =~ s/sys.stdin.readline/sysLEGITDOTstdinLEGITDOTreadline/;
		$variable_assign =~ s/fileinput.input/fileinputLEGITDOTinput/;	

		$variable_assign =~ s/length\((.*)\)/len\($1\)/; #convert all length() funcs to len() 
		$variable_assign =~ s/\s?\.\s?/ \+ /g;
		$variable_assign =~ s/\"\$([a-zA-Z]+)\"/$1/g;
		
		my $to_add = '';
		$quote = 0;
		$variable = 0;
		foreach $letter (split //,$variable_assign) {
			if ($letter eq '"') {
				if ($quote == 1) { 
					if ($variable == 1) {
						$variable = 0;
						$letter = '';
					}
					$quote = 0; 
				}
				else { $quote = 1; }
			}	 
			if (($letter eq '$')&&($quote == 1)) {
				#case that it is a variable inside a string
				$to_add .= '"+ ';
				$variable = 1;
			}
			if (($letter eq ' ')&&($variable == 1)) {
				#then variable is done
				$to_add .= ' + "';
				$variable = 0;
			} 
			$to_add .= $letter;
		}
		$variable_assign = $to_add;
		$variable_assign =~ s/\$//g;
		#$line_to_print .= "$variable_assign";
		undef $letter;
		$variable_assign =~ s/LEGITDOT/\./g;
		#$line_to_print .= "\n";
		if ($using_array == 1) {
			addToSourceArray("$variable_name$variable_assign)\n");
		} else {
			addToSourceArray("$variable_name= $variable_assign\n");
		}
	}
}

sub checkSysMod {
	#check if any sys commands are present
	#replace them with python equiv
	#call handle imports if true
	my $to_check = $_[0];
	if ($to_check eq '@ARGV') {
		$to_check = 'sys.argv[1:]';
		handleImports('sys');
	} elsif ($to_check eq '<STDIN>') {
		#NOTE: the following works, but I can't decide whether to use it		
		#if ($python_source[$lines_python_source-1] =~ /^(\s*)print \"([^\"]*)\"/) {
			#this happens in the examples in subset 3
			#there'll be a prompt sent out via stdout and then the perl reads in stdin
			#and the python translation uses the following rather than the usual print function
		#	$python_source[$lines_python_source-1] = "$1sys.stdout.write(\"$2\")\n";
		#}
		$to_check = "sys.stdin.readline()";
		handleImports('sys');
	} elsif ($to_check eq '<>') {
		$to_check = "fileinput.input()";
		handleImports('fileinput')
	} elsif ($to_check eq '$#ARGV') {
		$to_check = "len(sys.argv) - 1";
		handleImports('sys');
	} elsif ($to_check =~ /^\$ARGV\[([0-9])\]$/) {
		$to_check = "sys.argv[1]";
		handleImports('sys');
	}
	return $to_check;
}

sub printFunction {
	my $to_check = $_[0];
	#case of more complicated print statements including variables and functions etc..
	#note: currently only handles functions that are declared using brackets
	#if declared without brackets, then will be commented
	#cant handle multiple strings
	$to_check =~ s/\"//g; #remove trailing ""
	@statements = split / *\, *| +/, $to_check;
	my $is_string = 0;
	my $dont_add_space = 0;
	$last_stat = $statements[$#statements];
	$last_stat =~ s/\\n//g;
	my $is_first_statement = 1; #need this for printing strings
	my $first_stat = $stat[0];
	while ($stat = shift @statements) {
		if ($is_first_statement == 1) {
			$line_to_print = "print ";
			$is_first_statement = 0;
		}
		$stat =~ s/\\n//g;
		if ($stat =~ /\@([A-Za-z]+)/) {
			my $array_handling = $1;
			if ($is_first_statement == 0) {
				$line_to_print .= "\"" if $is_string == 1;
				#$line_to_print .= "\n";
				if ($line_to_print ne 'print ') {
					addToSourceArray("$line_to_print\n");
				}
			}
			addToSourceArray("for line in $array_handling:\n");
			$tab++;
			addToSourceArray("print line,\n");
			$tab--;
			$line_to_print = '';
			$is_string = 0;
			$is_first_statement = 1;
		} elsif ($stat =~ /{(.*)}/) {
			if ($is_string == 1) {
				$line_to_print .= "\"\, ";
				$is_string = 0;
			} 
			$hash_key = $1;
			$stat =~ s/^\$//; #need to remove perl's variable metacharacter "$"
			$stat = handleHash($stat,$hash_key);
			$line_to_print .= $stat;
		} elsif ($stat =~ /^\s*\$(.*)$/) {
			if ($is_string == 1) {
				$line_to_print .= "\"\,";
				$is_string = 0;
			} 
			$stat = $1;
			if ($stat =~ /^ARGV\[\$?(.*)\]$/) {
				$index = $1;
				handleImports('sys');
				$line_to_print .= "sys.argv[$index + 1]";
			} else {
				$line_to_print .= "$stat";
			}
		} elsif ($stat eq "\*") {
			if ($is_string == 1) {
				$line_to_print .= "\" ";
				$is_string = 0;
			} 
			$line_to_print .= "$stat";
		} elsif ($stat eq "") {
			#this is the case that the string to print was just a newline
			#just going to assume its nothing
			$dont_add_space = 1;
		} elsif ($stat =~ /^\s*join\((.*)/) {	
		#case it is a function call
		#this is a difficult one as the spilt statement on line 140 can be faulty here
		#as arguments in function calls are separated by commas
		#so in this case, i need to get all the arguments and then process the line
			$stat = $1;
			if ($stat eq '\'') {
				#we need the next bit
				$stat2 = shift @statements;
				if ($stat2 eq '\'') {
					#they were trying to seperate it with whitespace
					$line_to_print .= "\' \'.join\(";
				} else {
					#seperating it with something else
					$stat2 =~ s/\'//;
					$line_to_print .= "\'$stat2\'.join\(";
				}
				#no to find the variable they are joining
				$stat = shift @statements;
				$stat =~ s/\)//;
				$stat = checkSysMod($stat);
				$line_to_print .= $stat.")";
			}
		} else {
			#case printing a string, need to add quotes and put a comma before
			if (($is_string == 0)&&($line_to_print ne 'print ')) {#&&($stat eq $first_stat)) {
				$line_to_print =~ s/ $//; #my translater adds spaces between each statement in a print
				$line_to_print .= ', '; #but the comma needs to be before the space
				#only need to do this if the string is starting, which is when $is_string = 0
				#and also don't need if it is first statement in after function call 'print'
			}
			$line_to_print .= "\"$stat" if $is_string == 0;
			$line_to_print .= "$stat" if $is_string == 1;
			$is_string = 1;
		}
		#add space if its not last expression in print statement
		if (($stat ne $last_stat)&&($dont_add_space == 0)) {
			$line_to_print .= " ";
		}
		$dont_add_space = 0;
		#$is_first_statement = 0;
	}	
	$line_to_print .= "\"" if $is_string == 1;
	$line_to_print .= "\n";
	addToSourceArray($line_to_print);
}

sub regularExpHandling {
	#translates perl's regular expressions to python's own version
	my $perl_reg = $_[0]; #will be the command that follows the "=~" sign
	my $variable = $_[1]; #the variable that's being operated on
	if ($perl_reg =~ /^\s*s\/([^\/]+)\/([^\/]*)\/[g]?/) {
		$pattern = $1;
		$change_to = $2;
		if ($pattern =~ s/\$(.+)/$1/) {
			$perl_reg = "re.sub($pattern, '$change_to', $variable)";
		} else {
			$perl_reg = "re.sub(r'$pattern', '$change_to', $variable)";
		}
	} elsif ($perl_reg =~ /^\s*\/([^\/]+)\//) {
		#translates to re.search in python
		#the examples suggest re.match, but re.match only returns true if the
		#expression searched for occurs at the start of the string searched in
		$pattern = $1;
		if ($pattern =~ s/\$(.+)/$1/) { #this is removing the end of line metacharacter
			$perl_reg = "re.search($pattern, $variable)";
		} else {
			$perl_reg = "re.search('$pattern', $variable)";
		}
	} else {
		$perl_reg = "#$perl_reg#NOT HANDLING THIS CASE YET";
	}
	handleImports('re'); #import modules for python
	return $perl_reg;
}

sub conditionHandling {
	#function to go through conditional statements and to translate them 
	#appropriately to python and returns the result
	my $cond_to_check = $_[0];
	if ($cond_to_check =~ /{(.*)}/) {
		#its a hash
		$hash_key = $1;
		$cond_to_check =~ s/^\$//; #need to remove perl's variable metacharacter "$"
		return handleHash($cond_to_check,$hash_key);
	} elsif ($cond_to_check =~ /^\s*length\(([^\)]+)\)\s*/) {
		$variable = $1;
		return "len(".conditionHandling($variable).")";
	} elsif ($cond_to_check =~ /^\$([1-9])$/) {
		return "m.group($1)";
	} elsif ($cond_to_check =~ /^\$(.*)$/) {
		#variable declaration, just remove "$"
		return $1;
	} elsif ($cond_to_check =~ /^\>=*|[=!]?=|\<=*|%|&|\||\^|~|>>|<<|\*\*|!$/) {
		#conditional operators that are the same in perl and python
		#i am also including bitwise operators here as they are also the same
		#this case here is also used to determine that a variable is an integer
		handleIntegerVariables($_[1]); #the last variable is passed through the second parameter
		return " $cond_to_check ";
	} elsif ($cond_to_check eq "ne") {
		return " != ";
	} elsif ($cond_to_check eq "eq") {
		return " == ";
	} elsif ($cond_to_check eq "lt") {
		return " < ";
	} elsif ($cond_to_check eq "gt") {
		return " > ";
	} elsif ($cond_to_check eq "le") {
		return " <= ";
	} elsif ($cond_to_check eq "ge") {
		return " >= "
	} elsif ($cond_to_check =~ /^[\"\'0-9a-zA-Z]+$/) {
		return $cond_to_check;
	} else { return "?$cond_to_check?"; } 
}

sub handleIf {
	#function for handling if statements, mainly just changes curly brackets
	#to colon, and translates the condition statement
	my $conds_to_trans = $_[0];
	$conds_to_trans =~ s/length\((.+)\)/lenLBRACKET$1RBRACKET/g;
	$conds_to_trans =~ s/^\(//;
	$conds_to_trans =~ s/\)$//;
	my $line_to_print = '';
	if ($conds_to_trans =~ s/^\$(.+)\=\~//) {
		my $v_name = $1;
		my $random_letter = 'm';
		addToSourceArray("$random_letter = ".regularExpHandling($conds_to_trans, $v_name)."\n");
		$line_to_print .= "if $random_letter";
	} else {
		my @a = split /\(|\)/,$conds_to_trans;
		#print "@a\n";
		$line_to_print .= "if ";
		while (my $condi = shift @a) {
			#got to check if its a logical operator
			if ($condi =~ /^\&\&$/ ) {
				$line_to_print .= ' and ';
				next;
			} elsif ($condi =~ /^\|\|$/) {
				$line_to_print .= ' or ';
				next;
			}
			#now go through conds and trans
			my @conds = split /\s+/, $condi;
			foreach $cond (@conds) {
				if ($cond =~ /lenLBRACKET.+RBRACKET/) {
					$cond =~ s/LBRACKET/\(/;
					$cond =~ s/RBRACKET/\)/;
					$cond =~ s/\$//;
					$line_to_print .= $cond;
				} else {
					$line_to_print .= conditionHandling($cond, $last);
					$last = $cond;
				}
			}
		}
	}
	addToSourceArray("$line_to_print:\n");
}

sub handleWhile {
	#translates perl's while loops, and handles the conditionals
	my $conds_to_trans = $_[0];
	$conds_to_trans =~ s/length\((.+)\)/lenLBRACKET$1RBRACKET/g;
	$conds_to_trans =~ s/^\(//;
	$conds_to_trans =~ s/\)$//;
	my @a = split /\(|\)/,$conds_to_trans;
	$line_to_print = "while ";
	while (my $condi = shift @a) {
		#got to check if its a logical operator
		if ($condi =~ /^\&\&$/ ) {
			$line_to_print .= ' and ';
			next;
		} elsif ($condi =~ /^\|\|$/) {
			$line_to_print .= ' or ';
			next;
		}
		my $should_break = 0;
		if ($condi =~ /\@/) {
			(my $assign, my $op) = split /\=/,$condi;
			$cond_to_check = handleArrayTake($op, $assign);
			$line_to_print .= $cond_to_check;
		} else {
			my @conds = split /\s+/, $condi;
			my $last = '';
			foreach $cond(@conds) {
				break if $should_break == 1;
				if (($cond eq '<>')||($cond eq '<STDIN>')) {
					#reading from STDIN/arguments, equiv of python fileinput.input()
					#however need to use for loop and handle the import
					$line_to_print =~ s/^while/for/;
					$line_to_print =~ s/=/in/;
					$cond = checkSysMod($cond);
					#note: the above function call for <STDIN> will return 'sys.stdin.readline()' for our python
					#translation. This unfortunately doesn't work in the context of a loop, as 'sys.stdin.readline()'
					#returns a single string, and as such python will iterate through each character in that string
					#and not perform any operations on any of the other strings, as they aren't called.
					#to fix this, we need it to be returned as a file object, so we will change it to 'sys.stdin'
					#which performs correctly in this context
					$cond =~ s/sys\.stdin\.readline\(\)/sys\.stdin/;
					$line_to_print .= $cond;
				} elsif ($cond =~ /\<([^>]*)\>/) {
					my $filehandle = $1; #file object we're dealing with
					#now need to find the variable name it's being assigned
					$line_to_print =~ s/ (.*) \=//; #now it will be called $1
					$line_to_print = "for $1 in $filehandle";
					$should_break = 1;
				} elsif ($cond =~ /lenLBRACKET.+RBRACKET/) {
					$cond =~ s/LBRACKET/\(/;
					$cond =~ s/RBRACKET/\)/;
					$cond =~ s/\$//;
					$line_to_print .= $cond;
				} else {
					$line_to_print .= conditionHandling($cond,$last);
				}
				$last = $cond;
			}	
		}
	}
	addToSourceArray("$line_to_print:\n");
}

sub handleImports {
	#checks if a certain import has already been added to source code, to prevent duplicates
	my $import_to_check = $_[0];
	if (!grep( /^$import_to_check$/, @imports_python_source)) {
		$imports_python_source[$lines_imports] = "$import_to_check";
		$lines_imports++;
	} 
	#now the previous lines in our source output array need to be altered
	#to fit with the new import (ie the print funct is now 
	#sys.stdout.write()
	#JUST WRITING ONE TO CHECK FOR PRINT FUNCTION IN SYS NOW	
	#foreach $line (@python_source) {
	#	if ($line =~ /^(\s*)print\s*(.*)$/) {
	#		$line = "$1sys.stdout.write($2)\n";
	#	} 
	#}
}

sub handleForeach {
	#foreach loops are slightly tougher than if and while loops to translate
	#they use a declaration and then a set of numbers which act as a range 
	#of indexes
	my $conds_to_trans = $_[0];
    $line_to_print = "for ";
    my @conds = split /\s+/, $conds_to_trans;

	#first variable will just be a variable name
	$line_to_print .= conditionHandling($conds[0]);
	
	#then need to add some python syntax
	$line_to_print .= " in ";
	
	#then the difficult part, translating range
	if ($conds_to_trans =~ /keys \%([^ ]*)/) {
		#the case that we're iterating through the keys of a hash
		$dict_name = $1;
		if ($conds_to_trans =~ /sort/) {
			$line_to_print .= "sorted($dict_name.keys())";
		} else {
			$line_to_print .= "$dict_name.keys()";
		}	
	} elsif ($conds_to_trans =~ s/(\@[^ ]+)//) {
		my $cond_check = checkSysMod($1);
		$cond_check =~ s/^\@//;
		#case its reading the elements in an array
		#then it's 'for line in array'
		$line_to_print .= $cond_check;
	} else {
		$conds[1] =~ s/\(|\)//;
		my @nums = split /\.+/, $conds[1];
		$nums[0] = checkSysMod($nums[0]);
		if ($nums[0] eq 'sys.argv[1:]') {
			$line_to_print .= $nums[0];
		} else{
			$line_to_print .= "xrange(";
			if ($nums[1] =~ s/^\$//) {
				$line_to_print .= "$nums[0],int($nums[1]))";
			} else {
				$nums[1] = checkSysMod($nums[1]);
				if ($nums[1] eq 'len(sys.argv) - 1') {
					$line_to_print .= "$nums[1])";
				} else {
					$nums[1]++; #pythons range function doesn't include last num
					$line_to_print .= "$nums[0], $nums[1])";
				}
			}			
		}
	}
    addToSourceArray("$line_to_print:\n");
}

sub handleElse {
	#similar to handleIf except for the else statement
	my $cond_to_handle = $_[0];
	#print "Hayden here and ($cond_to_handle)\n";
	if ($cond_to_handle =~ /^\s*\}\s*elsif\s*\((.*)\)\s*\{\s*$/) {
		#case that it is an elsif statement
		$line_to_print = "elif ";
	         #now loop through conds and trans
        	my @conds = split /\s+/, $1;	
        	foreach $cond (@conds) {
                	$line_to_print .= conditionHandling($cond);
        	}	
        	addToSourceArray("$line_to_print:\n");
		return 1;
	} elsif ($cond_to_handle =~ /^\s*\}\s*else\s*\{\s*$/) {
		#case that it is a normal else statement
		addToSourceArray("else:\n");
		return 1;
	} else {
		return 0; #case its the end
	}
	return $result;
}

sub addToSourceArray {
	#helper function that automatically adds the required amount of tabs, and then adds the line of
	#newly formatted python code to our source array
	my $to_print = $_[0];
	$amt_tabs = $tab;
	while ($amt_tabs > 0) {
		$python_source[$lines_python_source] .= "    ";
		$amt_tabs--;
	}
	$python_source[$lines_python_source++] .= $to_print;
}

sub outputSource {
	#helper function that prints all aspects of the python source in correct order and formatting
	print "import " if $lines_imports != 0;
	$i = 0;
	foreach $line (@imports_python_source) {
		print $line;
		if ($i < $lines_imports - 1) { print ", "; }
		$i++	
	}
	print "\n" if $i != 0;
	foreach $line (@hashes_source) {
		print "$line = {}\n";
	}
	foreach $line (@list_source) {
		print "$line = []\n";
	}
	foreach $line (@python_source) {
		print $line;
	}
}
