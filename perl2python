#!/usr/bin/perl

#CURRENTLY WORKING ON LINE 104: test 3 is printing out print functions
#with newlines in the quotations that shouldn't be there
#also, it should be writing "sys.stdout.write(wordds...)" rather than
#print(wordds..), but the answers want print(wordds..) so have a look
#into this

#need to have some way to determine whether a variable is a string or a integer 
#maybe a dict of all variable names and just assume they are strings?

# written by andrewt@cse.unsw.edu.au September 2013
# as a starting point for COMP2041/9041 assignment 
# http://cgi.cse.unsw.edu.au/~cs2041/13s2/assignments/perl2python
# edited by hwav057@cse.unsw.edu.au for more functionality September 2013
$tab = 0;
our @python_source = ();
our @imports_python_source = ();
$lines_python_source = 0;
our $lines_imports = 0;
while ($line = <>) {
	#conditions TO-DO:
	# 1. if loops DONE
	# 2. foreach loops DONE //kinda.. needs more functionality
	# 3. while loops DONE
	# 4. condition handling (perhaps a function that all of the above can call)
	# 5. boolean logic and string concatenation
	# 6. range operator and when perl converts array to scalar length (context)
	if ($line =~ /^#!/ && $. == 1) {
	
		# translate #! line 
		
		print "#!/usr/bin/python2.7 -u\n";
	} elsif ($line =~ /^\s*#/ || $line =~ /^\s*$/) {
	
		# Blank & comment lines can be passed unchanged
		
		addToSourceArray("$line");
	} elsif ($line =~ /^\s*print\s*"*(.*)"*\\?n?"*\s*\;$/) {
		# Python's print adds a new-line character by default
		# so we need to delete it from the Perl print statement
		#TO-DO: need to consider case of variablie interpolation
		#still not done, can only work when only printing variable
		$temp = $1;
		printFunction($temp);
			
	} elsif ($line =~ /^\s*\$(.+)\;$/) {
		#declaring a variable 
		#python just removes the dollar sign and semi-colon
		($a,$temp) = split /\s*\=\s*/, $1;	
		variableDec($a,$temp);	
 	} elsif ($line =~ /^\s*if\s*\((.*)\)\s*\{\s*$/) {
		#if condition
		#NOT COMPLETE
		#needs variable interp
		handleIf($1);
		$tab++;
	} elsif ($line =~ /^\s*while\s*\((.*)\)\s*\{\s*$/) {
		#while loop
		handleWhile($1);
		$tab++;
	} elsif ($line =~ /^\s*foreach\s*(.+)\)\s*\{\s*$/) {
		#foreach loop
		handleForeach($1);
		$tab++;
	} elsif ($line =~ /^\s*\}\s*.*\s*$/) {
		#catch the end of a loop or similar statement with a "}"
		#WON'T work if there is anything else in the line, ie a elsif stat
		$tab--;
		$result = handleElse($line); # =1 when else, =0 when normal
		$tab += $result;
	} else {
	
		# Lines we can't translate are turned into comments
		
		addToSourceArray("#$line\n");
	}
	$lines_python_source++;
}
outputSource();

sub variableDec {
	my $variable_name = $_[0];
	my $variable_assign = $_[1];
	if ($variable_assign =~ /\$/) {
			#check if each item is a variable and interp
			@assigns = split / /, $variable_assign;
			$line_to_print = "$variable_name = ";
			foreach $assignment (@assigns) {
				if ($assignment eq "\<STDIN\>") {
					handleImports("sys");
					$assignment = "int(sys.stdin.readline())";
				} elsif ($assignment =~ /\$/) {
					$assignment =~ s/\$//;
				}	
				$line_to_print .= "$assignment ";
			}
			$line_to_print .= "\n";
			addToSourceArray($line_to_print);
		} else {
			if ($variable_assign eq "\<STDIN\>") {
				handleImports("sys");
				$variable_assign = "int(sys.stdin.readline())";
			}
			addToSourceArray("$variable_name = $variable_assign\n");
		}
}

sub printFunction {
	my $to_check = $_[0];
	$to_check =~ s/\"//g; #remove trailing ""
	if ($to_check =~ /\$/) {
		#case of variable interpolation
		@statements = split /\,*\s+/, $to_check;
		$sys_check = 0;
		if (grep( /^sys$/, @imports_python_source)) {
			$line_to_print = "sys.stdout.write(";
			$sys_check = 1;
		} else {
			$line_to_print = "print ";
		}
		foreach $stat (@statements) {
			if ($stat =~ /\$(.+)/) {
				$line_to_print .= "$1";
			} elsif ($stat =~ /$\".+\"^/) {
				$line_to_print .= "$stat";
			} elsif ($stat eq "\*") {
				$line_to_print .= "$stat";
			}
			if ($stat ne $statements[$#statements]) {
				$line_to_print .= " ";
			}
		}
		$line_to_print .= ")" if $sys_check == 1;
		$line_to_print .= "\n";
		addToSourceArray($line_to_print);
	} else {
		if (grep( /^$import_to_check$/, @imports_python_source)) {
			addToSourceArray("sys.stdout.write\(\"$to_check\"\)\n");
		} else {
			addToSourceArray("print \"$to_check\"\n");
		}
	}
}

sub conditionHandling {
	#function to go through conditional statements and to translate them 
	#appropriately to python and returns the result
	my $cond_to_check = $_[0];
	
	if ($cond_to_check =~ /^\$(.*)$/) {
		#variable declaration, just remove "$"
		return $1;
	} elsif ($cond_to_check =~ /^\>=*|[=!]=|\<=*|%$/) {
		#conditional operators that are the same in perl and python
		return " $cond_to_check ";
	} elsif ($cond_to_check eq "ne") {
		return " != ";
	} elsif ($cond_to_check eq "eq") {
		return " == ";
	} elsif ($cond_to_check eq "lt") {
		return " < ";
	} elsif ($cond_to_check eq "gt") {
		return " > ";
	} elsif ($cond_to_check eq "le") {
		return " <= ";
	} elsif ($cond_to_check eq "ge") {
		return " >= "
	} elsif ($cond_to_check =~ /^[0-9a-zA-Z]+$/) {
		return $cond_to_check;
	} else { return "?$cond_to_check?"; } 
}

sub handleIf {
	#function for handling if statements, mainly just changes curly brackets
	#to colon, and translates the condition statement
	my $conds_to_trans = $_[0];
	$line_to_print = "if ";

	#now loop through conds and trans
	my @conds = split /\s+/, $conds_to_trans;
	
	foreach $cond (@conds) {
		$line_to_print .= conditionHandling($cond);
	}
	
	addToSourceArray("$line_to_print:\n");
}

sub handleWhile {
	my $conds_to_trans = $_[0];
	$line_to_print = "while ";

	my @conds = split /\s+/, $conds_to_trans;

	foreach $cond(@conds) {
		$line_to_print .= conditionHandling($cond);
	}

	addToSourceArray("$line_to_print:\n");
}

sub handleImports {
	my $import_to_check = $_[0];
	if (!grep( /^$import_to_check$/, @imports_python_source)) {
		$imports_python_source[$lines_imports] = "$import_to_check";
		$lines_imports++;
	} 
	#now the previous lines in our source output array need to be altered
	#to fit with the new import (ie the print funct is now 
	#sys.stdout.write()
	#JUST WRITING ONE TO CHECK FOR PRINT FUNCTION IN SYS NOW	
	foreach $line (@python_source) {
		if ($line =~ /^(\s*)print\s*(.*)$/) {
			$line = "$1sys.stdout.write($2)\n";
		} 
	}
}

sub handleForeach {
	#foreach loops are slightly tougher than if and while loops to translate
	#they use a declaration and then a set of numbers which act as a range 
	#of indexes
	my $conds_to_trans = $_[0];
        $line_to_print = "for ";

        my @conds = split /\s+/, $conds_to_trans;

	#first variable will just be a variable name
	$line_to_print .= conditionHandling($conds[0]);

	#then need to add some python syntax
	$line_to_print .= " in ";

	#then the difficult part, translating range
	#ATM just considering basic example of (x..y)
	$line_to_print .= "range(";
	$conds[1] =~ s/\(|\)//;
	my @nums = split /\.+/, $conds[1];
	$nums[1]++; #pythons range function doesn't include last num
	$line_to_print .= "$nums[0], $nums[1])";
	
        addToSourceArray("$line_to_print:\n");
	
}

sub handleElse {
	my $cond_to_handle = $_[0];
	#print "Hayden here and ($cond_to_handle)\n";
	if ($cond_to_handle =~ /^\s*\}\s*elsif\s*\((.*)\)\s*\{\s*$/) {
		#case that it is an elsif statement
		$line_to_print = "elif ";
 
	         #now loop through conds and trans
        	my @conds = split /\s+/, $1;
 	
        	foreach $cond (@conds) {
                	$line_to_print .= conditionHandling($cond);
        	}	

        	addToSourceArray("$line_to_print:\n");
		return 1;
	} elsif ($cond_to_handle =~ /^\s*\}\s*else\s*\{\s*$/) {
		#case that it is a normal else statement
		addToSourceArray("else:\n");
		return 1;
	} else {
		return 0; #case its the end
	}

	return $result;
}

sub addToSourceArray {
	my $to_print = $_[0];
	$amt_tabs = $tab;
	while ($amt_tabs > 0) {
		$python_source[$lines_python_source] .= "    ";
		$amt_tabs--;
	}
	$python_source[$lines_python_source] .= $to_print;
}

sub outputSource {
	print "import " if $lines_imports != 0;
	$i = 0;
	foreach $line (@imports_python_source) {
		print $line;
		if ($i < $lines_imports - 1) { print ", "; }
		$i++	
	}
	print "\n" if $i != 0;
	foreach $line (@python_source) {
		print $line;
	}
}
