#!/usr/bin/perl

#currently getting examples/4/line_count.1.pl to translate properly

# written by andrewt@cse.unsw.edu.au September 2013
# as a starting point for COMP2041/9041 assignment 
# http://cgi.cse.unsw.edu.au/~cs2041/13s2/assignments/perl2python
# edited by hwav057@cse.unsw.edu.au for more functionality September 2013
$tab = 0;
our @python_source = ();
our @imports_python_source = ();
our %variables = [];
$lines_python_source = 0;
our $lines_imports = 0;
while ($line = <>) {
	#conditions TO-DO:
	# 2. foreach loops DONE //kinda.. needs more functionality
	# 3. needs a function that can check for SYS modules, ie ARGV etc.. maybe reads in a line, and returns a line which has had the appropriate changes?
	# 5. boolean logic and string concatenation
	# 6. range operator and when perl converts array to scalar length (context)
	chomp $line;
	if ($line =~ /^#!/ && $. == 1) {
	
		# translate #! line 
		
		print "#!/usr/bin/python2.7 -u\n";
	} elsif ($line =~ /^\s*#/ || $line =~ /^\s*$/) {
	
		# Blank & comment lines can be passed unchanged
		addToSourceArray("$line\n");
	} elsif ($line =~ /^\s*print\s*("*.*\s*[\\n]?\s*")*\s*\;*$/) {
		# Python's print adds a new-line character by default
		# so we need to delete it from the Perl print statement
		#TO-DO: need to consider case of variablie interpolation
		#still not done, can only work when only printing variable
		$temp = $1;
		printFunction($temp);
			
	} elsif ($line =~ /^\s*\$(.+)\;$/) {
		#declaring a variable 
		#python just removes the dollar sign and semi-colon
		($a,$temp) = split /\s*\=\s*/, $1;	
		variableDec($a,$temp);	
 	} elsif ($line =~ /^\s*if\s*\((.*)\)\s*\{\s*$/) {
		#if condition
		#NOT COMPLETE
		#needs variable interp
		handleIf($1);
		$tab++;
	} elsif ($line =~ /^\s*while\s*\((.*)\)\s*\{\s*$/) {
		#while loop
		handleWhile($1);
		$tab++;
	} elsif ($line =~ /^\s*foreach\s*(.+)\)\s*\{\s*$/) {
		#foreach loop
		handleForeach($1);
		$tab++;
	} elsif ($line =~ /^\s*\}\s*.*\s*$/) {
		#catch the end of a loop or similar statement with a "}"
		#WON'T work if there is anything else in the line, ie a elsif stat
		$tab--;
		$result = handleElse($line); # =1 when else, =0 when normal
		$tab += $result;
	} elsif ($line =~ /^\s*chomp \$([^\;]*)\;\s*$/) {
		#handle chomp function	
		addToSourceArray("$1 = $1.rstrip()\n");
	} elsif ($line =~ /\s*last;\s*$/) {
		addToSourceArray("break\n");
	} else {
	
		# Lines we can't translate are turned into comments
		
		addToSourceArray("#$line\n");
	}
}
outputSource();

sub handleIntegerVariables { 
	#read in variables passed from the conditionHandling function
	#and determine if it is a variable or constant
	#if constant, then change code to include int() changing
	my $variable= $_[0];
	
	if ($variable =~ /\$/) {
		$variable =~ s/\$//;
		foreach my $py_line (@python_source) {
			#these are cases that have been needed to be added for the examples
			#i am only adding the necessary ones
			if ($py_line =~ /^(\s*$variable\s*=\s*)(sys.stdin.readline\(\)\s*)[\\n]*$/) {
				$py_line = "$1float(sys.stdin.readline())\n";
			}
		}
		$python_source[$lines_python_source]
	}
}

sub variableDec {
	my $variable_name = $_[0];
	my $variable_assign = $_[1];
	if ($variable_assign =~ /\$/) {
		#check if each item is a variable and interp
		@assigns = split / /, $variable_assign;
		$line_to_print = "$variable_name = ";
		foreach $assignment (@assigns) {
			if ($assignment eq "\<STDIN\>") {
				handleImports("sys");
				$assignment = "sys.stdin.readline()";
			} elsif ($assignment =~ /\$/) {
				$assignment =~ s/\$//;
			}	
			$line_to_print .= "$assignment ";
		}
		$line_to_print .= "\n";
		addToSourceArray($line_to_print);
	} elsif ($variable_assign =~ /^~/) {
		$variable_assign =~ s/^~\s*//;
		$variable_assign = regularExpHandling($variable_assign, $variable_name);
		addToSourceArray("$variable_name = $variable_assign\n");
	} elsif ($variable_assign eq '') {
		#variable dec is of form $variable++ or $variable--
		if ($variable_name =~ s/\-\-$//) {
			addToSourceArray("$variable_name -= 1\n"); 
		} elsif ($variable_name =~ s/\+\+//) {
			addToSourceArray("$variable_name += 1\n"); 
		} else { #case that its of a different form, then can be recognised and fixed
			addToSourceArray("#$variable_name# THIS IS NOT CODED FOR YET\n"); 
		}
	} else { 
		$variable_assign = checkSysMod($variable_assign);
		addToSourceArray("$variable_name = $variable_assign\n");
	}
}

sub checkSysMod {
	#check if any sys commands are present
	#replace them with python equiv
	#call handle imports if true
	my $to_check = $_[0];
	if ($to_check eq '@ARGV') {
		$to_check = 'sys.argv[1:]';
		handleImports('sys');
	} elsif ($to_check eq '<STDIN>') {
		#NOTE: the following works, but I can't decide whether to use it		
		#if ($python_source[$lines_python_source-1] =~ /^(\s*)print \"([^\"]*)\"/) {
			#this happens in the examples in subset 3
			#there'll be a prompt sent out via stdout and then the perl reads in stdin
			#and the python translation uses the following rather than the usual print function
		#	$python_source[$lines_python_source-1] = "$1sys.stdout.write(\"$2\")\n";
		#}
		$to_check = "sys.stdin.readline()";
		handleImports('sys');
	} elsif ($to_check eq '<>') {
		$to_check = "fileinput.input()";
		handleImports('fileinput')
	} elsif ($to_check eq '$#ARGV') {
		$to_check = "len(sys.argv) - 1";
		handleImports('sys');
	} 
	return $to_check;
}

sub printFunction {
	my $to_check = $_[0];
	#case of more complicated print statements including variables and functions etc..
	#note: currently only handles functions that are declared using brackets
	#if declared without brackets, then will be commented
	#cant handle multiple strings
	$to_check =~ s/\"//g; #remove trailing ""
	@statements = split / *\, *| +/, $to_check;
	$line_to_print = "print ";
	my $is_string = 0;
	my $dont_add_space = 0;
	$last_stat = $statements[$#statements];
	$last_stat =~ s/\\n//g;
	my $is_first_statement = 1; #need this for printing strings
	while ($stat = shift @statements) {
		$stat =~ s/\\n//g;
		if ($stat =~ /^\s*\$(.*)$/) {
			if ($is_string == 1) {
				$line_to_print .= "\"\,";
				$is_string = 0;
			} 
			$stat = $1;
			if ($stat =~ /^ARGV\[\$?(.*)\]$/) {
				$index = $1;
				handleImports('sys');
				$line_to_print .= "sys.argv[$index + 1]";
			} else {
				$line_to_print .= "$stat";
			}
		} elsif ($stat eq "\*") {
			if ($is_string == 1) {
				$line_to_print .= "\" ";
				$is_string = 0;
			} 
			$line_to_print .= "$stat";
		} elsif ($stat eq "") {
			#this is the case that the string to print was just a newline
			#just going to assume its nothing
			$dont_add_space = 1;
		} elsif ($stat =~ /^\s*join\((.*)/) {	
		#case it is a function call
		#this is a difficult one as the spilt statement on line 140 can be faulty here
		#as arguments in function calls are separated by commas
		#so in this case, i need to get all the arguments and then process the line
			$stat = $1;
			if ($stat eq '\'') {
				#we need the next bit
				$stat2 = shift @statements;
				if ($stat2 eq '\'') {
					#they were trying to seperate it with whitespace
					$line_to_print .= "\' \'.join\(";
				} else {
					#seperating it with something else
					$stat2 =~ s/\'//;
					$line_to_print .= "\'$stat2\'.join\(";
				}
				#no to find the variable they are joining
				$stat = shift @statements;
				$stat =~ s/\)//;
				$stat = checkSysMod($stat);
				$line_to_print .= $stat.")";
			}
		} else {
			#case printing a string, need to add quotes and put a comma before
			if (($is_string == 0)&&($is_first_statement == 0)) {
				$line_to_print =~ s/ $//; #my translater adds spaces between each statement in a print
				$line_to_print .= ', '; #but the comma needs to be before the space
				#only need to do this if the string is starting, which is when $is_string = 0
				#and also don't need if it is first statement in after function call 'print'
			}
			$line_to_print .= "\"$stat" if $is_string == 0;
			$line_to_print .= "$stat" if $is_string == 1;
			$is_string = 1;
		}
		#add space if its not last expression in print statement
		if (($stat ne $last_stat)&&($dont_add_space == 0)) {
			$line_to_print .= " ";
		}
		$dont_add_space = 0;
		$is_first_statement = 0;
	}	
	$line_to_print .= "\"" if $is_string == 1;
	$line_to_print .= "\n";
	addToSourceArray($line_to_print);
}

#not called anywhere yet #will be passed from variableDec
sub regularExpHandling {
	my $perl_reg = $_[0]; #will be the command that follows the "=~" sign
	my $variable = $_[1]; #the variable that's being operated on
	#print "MY REG = ($perl_reg) and VAR = ($variable)\n";
	if ($perl_reg =~ /^\s*s\/([^\/]+)\/([^\/]*)\/([g])/) {
		if ($3 eq 'g') {
			$perl_reg = "re.sub(r'$1', '$2', $variable)";
		} else {
			$perl_reg = "re.sub('$1', '$2', $variable)";
		}		
	} else {
		$perl_reg = "#$perl_reg#NOT HANDLING THIS CASE YET";
	}
	handleImports('re'); #import modules for python
	return $perl_reg;
}

sub conditionHandling {
	#function to go through conditional statements and to translate them 
	#appropriately to python and returns the result
	my $cond_to_check = $_[0];
	if ($cond_to_check =~ /^\$(.*)$/) {
		#variable declaration, just remove "$"
		return $1;
	} elsif ($cond_to_check =~ /^\>=*|[=!]?=|\<=*|%$/) {
		#conditional operators that are the same in perl and python
		#this case here is also used to determine that a variable is an integer
		handleIntegerVariables($_[1]); #the last variable is passed through the second parameter
		return " $cond_to_check ";
	} elsif ($cond_to_check eq "ne") {
		return " != ";
	} elsif ($cond_to_check eq "eq") {
		return " == ";
	} elsif ($cond_to_check eq "lt") {
		return " < ";
	} elsif ($cond_to_check eq "gt") {
		return " > ";
	} elsif ($cond_to_check eq "le") {
		return " <= ";
	} elsif ($cond_to_check eq "ge") {
		return " >= "
	} elsif ($cond_to_check =~ /^[\"\'0-9a-zA-Z]+$/) {
		return $cond_to_check;
	} else { return "?$cond_to_check?"; } 
}

sub handleIf {
	#function for handling if statements, mainly just changes curly brackets
	#to colon, and translates the condition statement
	my $conds_to_trans = $_[0];
	$line_to_print = "if ";

	#now loop through conds and trans
	my @conds = split /\s+/, $conds_to_trans;
	
	foreach $cond (@conds) {
		$line_to_print .= conditionHandling($cond, $last);
		$last = $cond;
	}
	
	addToSourceArray("$line_to_print:\n");
}

sub handleWhile {
	my $conds_to_trans = $_[0];
	$line_to_print = "while ";

	my @conds = split /\s+/, $conds_to_trans;

	foreach $cond(@conds) {
		if (($cond eq '<>')||($cond eq '<STDIN>')) {
			#reading from STDIN/arguments, equiv of python fileinput.input()
			#however need to use for loop and handle the import
			$line_to_print =~ s/^while/for/;
			$line_to_print =~ s/=/in/;
			$cond = checkSysMod($cond);
			#note: the above function call for <STDIN> will return 'sys.stdin.readline()' for our python
			#translation. This unfortunately doesn't work in the context of a loop, as 'sys.stdin.readline()'
			#returns a single string, and as such python will iterate through each character in that string
			#and not perform any operations on any of the other strings, as they aren't called.
			#to fix this, we need it to be returned as a file object, so we will change it to 'sys.stdin'
			#which performs correctly in this context
			$cond =~ s/sys\.stdin\.readline\(\)/sys\.stdin/;
			$line_to_print .= $cond;
		} else {
			$line_to_print .= conditionHandling($cond);
		}
	}

	addToSourceArray("$line_to_print:\n");
}

sub handleImports {
	my $import_to_check = $_[0];
	if (!grep( /^$import_to_check$/, @imports_python_source)) {
		$imports_python_source[$lines_imports] = "$import_to_check";
		$lines_imports++;
	} 
	#now the previous lines in our source output array need to be altered
	#to fit with the new import (ie the print funct is now 
	#sys.stdout.write()
	#JUST WRITING ONE TO CHECK FOR PRINT FUNCTION IN SYS NOW	
	#foreach $line (@python_source) {
	#	if ($line =~ /^(\s*)print\s*(.*)$/) {
	#		$line = "$1sys.stdout.write($2)\n";
	#	} 
	#}
}

sub handleForeach {
	#foreach loops are slightly tougher than if and while loops to translate
	#they use a declaration and then a set of numbers which act as a range 
	#of indexes
	my $conds_to_trans = $_[0];
    $line_to_print = "for ";
    my @conds = split /\s+/, $conds_to_trans;

	#first variable will just be a variable name
	$line_to_print .= conditionHandling($conds[0]);
	
	#then need to add some python syntax
	$line_to_print .= " in ";

	#then the difficult part, translating range
	#ATM just considering basic example of (x, y)
	$conds[1] =~ s/\(|\)//;
	my @nums = split /\.+/, $conds[1];
	$nums[0] = checkSysMod($nums[0]);
	if ($nums[0] eq 'sys.argv[1:]') {
		$line_to_print .= $nums[0];
	} else {
		$line_to_print .= "xrange(";
		$nums[1] = checkSysMod($nums[1]);
		if ($nums[1] eq 'len(sys.argv) - 1') {
			$line_to_print .= "$nums[1])";
		} else {
			$nums[1]++; #pythons range function doesn't include last num
			$line_to_print .= "$nums[0], $nums[1])";
		}		
	}
    addToSourceArray("$line_to_print:\n");
}

sub handleElse {
	my $cond_to_handle = $_[0];
	#print "Hayden here and ($cond_to_handle)\n";
	if ($cond_to_handle =~ /^\s*\}\s*elsif\s*\((.*)\)\s*\{\s*$/) {
		#case that it is an elsif statement
		$line_to_print = "elif ";
 
	         #now loop through conds and trans
        	my @conds = split /\s+/, $1;
 	
        	foreach $cond (@conds) {
                	$line_to_print .= conditionHandling($cond);
        	}	

        	addToSourceArray("$line_to_print:\n");
		return 1;
	} elsif ($cond_to_handle =~ /^\s*\}\s*else\s*\{\s*$/) {
		#case that it is a normal else statement
		addToSourceArray("else:\n");
		return 1;
	} else {
		return 0; #case its the end
	}

	return $result;
}

sub addToSourceArray {
	my $to_print = $_[0];
	$amt_tabs = $tab;
	while ($amt_tabs > 0) {
		$python_source[$lines_python_source] .= "    ";
		$amt_tabs--;
	}
	$python_source[$lines_python_source++] .= $to_print;
	
}

sub outputSource {
	print "import " if $lines_imports != 0;
	$i = 0;
	foreach $line (@imports_python_source) {
		print $line;
		if ($i < $lines_imports - 1) { print ", "; }
		$i++	
	}
	print "\n" if $i != 0;
	foreach $line (@python_source) {
		print $line;
	}
}
