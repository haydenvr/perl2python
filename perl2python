#!/usr/bin/perl

# written by andrewt@cse.unsw.edu.au September 2013
# as a starting point for COMP2041/9041 assignment 
# http://cgi.cse.unsw.edu.au/~cs2041/13s2/assignments/perl2python
# edited by hwav057@cse.unsw.edu.au for more functionality September 2013

while ($line = <>) {
	#conditions TO-DO:
	# 1. if loops
	# 2. foreach loops
	# 3. while loops
	# 4. condition handling (perhaps a function that all of the above can call)

	if ($line =~ /^#!/ && $. == 1) {
	
		# translate #! line 
		
		print "#!/usr/bin/python2.7 -u\n";
	} elsif ($line =~ /^\s*#/ || $line =~ /^\s*$/) {
	
		# Blank & comment lines can be passed unchanged
		
		print "$line";
	} elsif ($line =~ /^\s*print\s*"*(.*)\\n"*[\s;]*$/) {
		# Python's print adds a new-line character by default
		# so we need to delete it from the Perl print statement
		#TO-DO: need to consider case of variablie interpolation
		#still not done, can only work when only printing variable
		$temp = $1;
		printFunction($temp);
			
	} elsif ($line =~ /^\s*\$(.+)\;$/) {
		#declaring a variable 
		#python just removes the dollar sign and semi-colon
		($a,$temp) = split /\s*\=\s*/, $1;	
		variableDec($a,$temp);	
 	} elsif ($line =~ /^\sif\s*\((.*)\)\s*\{\s*$/) {
		#if condition
		#NOT COMPLETE
		$condition = $1;
		print "hi and $condition\n";
	} else {
	
		# Lines we can't translate are turned into comments
		
		print "#$line\n";
	}
}

sub variableDec {
	my $variable_name = $_[0];
	my $variable_assign = $_[1];
	if ($variable_assign =~ /\$/) {
			#check if each item is a variable and interp
			@assigns = split / /, $variable_assign;
			print "$variable_name = ";
			foreach $assignment (@assigns) {
				if ($assignment =~ /\$/) {
					$assignment =~ s/\$//;
				}	
				print "$assignment ";
			}
			print "\n";
		} else {
			print "$variable_name = $variable_assign\n";
		}
}

sub printFunction {
	my $to_check = $_[0];
	if ($to_check =~ /\$/) {
		#case of variable interpolation
		@statements = split /\,*\s+/, $to_check;
		print "print ";
		foreach $stat (@statements) {
			if ($stat =~ /\$(.+)/) {
				print "$1";
			} elsif ($stat =~ /$\".+\"^/) {
				print "$stat";
			} elsif ($stat eq "\*") {
				print "$stat";
			}
			if ($stat ne $statements[$#statements]) {
				print " ";
			}
		}
		print "\n";
	} else {
		print "print \"$to_check\"\n";
	}
}

