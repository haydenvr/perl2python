#!/usr/bin/perl

#CURRENTLY WORKING ON LINE 120

# written by andrewt@cse.unsw.edu.au September 2013
# as a starting point for COMP2041/9041 assignment 
# http://cgi.cse.unsw.edu.au/~cs2041/13s2/assignments/perl2python
# edited by hwav057@cse.unsw.edu.au for more functionality September 2013
$tab = 0;
while ($line = <>) {
	#conditions TO-DO:
	# 1. if loops
	# 2. foreach loops
	# 3. while loops
	# 4. condition handling (perhaps a function that all of the above can call)

	if ($line =~ /^#!/ && $. == 1) {
	
		# translate #! line 
		
		print "#!/usr/bin/python2.7 -u\n";
	} elsif ($line =~ /^\s*#/ || $line =~ /^\s*$/) {
	
		# Blank & comment lines can be passed unchanged
		
		outputPrint("$line");
	} elsif ($line =~ /^\s*print\s*"*(.*)\\n"*[\s;]*$/) {
		# Python's print adds a new-line character by default
		# so we need to delete it from the Perl print statement
		#TO-DO: need to consider case of variablie interpolation
		#still not done, can only work when only printing variable
		$temp = $1;
		printFunction($temp);
			
	} elsif ($line =~ /^\s*\$(.+)\;$/) {
		#declaring a variable 
		#python just removes the dollar sign and semi-colon
		($a,$temp) = split /\s*\=\s*/, $1;	
		variableDec($a,$temp);	
 	} elsif ($line =~ /^\s*if\s*\((.*)\)\s*\{\s*$/) {
		#if condition
		#NOT COMPLETE
		#needs variable interp
		$tab++;
		handleIf($1);
	} elsif ($line =~ /^\s*\}\s*$/) {
		#catch the end of a loop or similar statement with a "}"
		#WON'T work if there is anything else in the line, ie a elsif stat
		$tab--;
		outputPrint("\n");
	} else {
	
		# Lines we can't translate are turned into comments
		
		outputPrint("#$line\n");
	}
}

sub variableDec {
	my $variable_name = $_[0];
	my $variable_assign = $_[1];
	if ($variable_assign =~ /\$/) {
			#check if each item is a variable and interp
			@assigns = split / /, $variable_assign;
			$line_to_print = "$variable_name = ";
			foreach $assignment (@assigns) {
				if ($assignment =~ /\$/) {
					$assignment =~ s/\$//;
				}	
				$line_to_print .= "$assignment ";
			}
			$line_to_print .= "\n";
			outputPrint($line_to_print);
		} else {
			outputPrint("$variable_name = $variable_assign\n");
		}
}

sub printFunction {
	my $to_check = $_[0];
	if ($to_check =~ /\$/) {
		#case of variable interpolation
		@statements = split /\,*\s+/, $to_check;
		$line_to_print = "print ";
		foreach $stat (@statements) {
			if ($stat =~ /\$(.+)/) {
				$line_to_print .= "$1";
			} elsif ($stat =~ /$\".+\"^/) {
				$line_to_print .= "$stat";
			} elsif ($stat eq "\*") {
				$line_to_print .= "$stat";
			}
			if ($stat ne $statements[$#statements]) {
				$line_to_print .= " ";
			}
		}
		$line_to_print .= "\n";
		outputPrint($line_to_print);
	} else {
		outputPrint("print \"$to_check\"\n");
	}
}

sub conditionHandling {
	#function to go through conditional statements and to translate them 
	#appropriately to python and returns the result
	my $cond_to_check = $_[0];
	
	if ($cond_to_check =~ /^\$/) {
		#variable declaration, just remove "$"
	} #write more elsifs to check each conditional ie > < = ne eq ...

	return $cond_to_check;
}

sub handleIf {
	#function for handling if statements, mainly just changes curly brackets
	#to colon, and translates the condition statement
	my $conds_to_trans = $_[0];
	$line_to_print = "if (";

	#now loop through conds and trans
	#NOT DONE!!!
	
	outputPrint("$line_to_print:\n");
}

sub outputPrint {
	my $to_print = $_[0];
	$amt_tabs = $tab;
	while ($amt_tabs > 0) {
		print "    ";
		$amt_tabs--;
	}
	print "$to_print";
}
